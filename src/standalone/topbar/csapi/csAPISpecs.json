{
  "apiSpecs": [
    {
      "id": 1,
      "name": "GVVMC",
      "leadingInfo": [
        "[GET]/openapi/gvvmc/eta",
        "[GET]/openapi/gvvmc/etb"
      ],
      "spec": {
        "swagger": "2.0",
        "host": "apis.bigsqa2.opsmart.cn",
        "basePath": "/openapi",
        "produces": [
          "application/json"
        ],
        "paths": {
          "/openapi/gvvmc/eta": {
            "get": {
              "summary": "Carrier Profile",
              "description": "Returns the detailed information of the carrier specified by ID or SCAC.\n",
              "parameters": [
                {
                  "name": "id",
                  "in": "query",
                  "description": "Carrier ID or SCAC.",
                  "required": true,
                  "type": "string"
                }
              ],
              "tags": [
                "Big Schedules - Carriers"
              ],
              "responses": {
                "200": {
                  "description": "Successful request",
                  "schema": {
                    "$ref": "#/definitions/CarrierProfile"
                  }
                },
                "400": {
                  "description": "Parameter required error",
                  "schema": {
                    "$ref": "#/definitions/Error"
                  }
                },
                "500": {
                  "description": "Internal server error",
                  "schema": {
                    "$ref": "#/definitions/Error"
                  }
                }
              }
            }
          },
          "/openapi/gvvmc/etb": {
            "get": {
              "summary": "Gets the latest cyclones information and their paths.",
              "description": "",
              "operationId": "getTyphoonInfo",
              "parameters": [],
              "tags": [
                "Big Schedules - Messages"
              ],
              "responses": {
                "200": {
                  "description": "Successful request",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/WeatherEvent"
                    }
                  }
                },
                "400": {
                  "description": "Parameter required error",
                  "schema": {
                    "$ref": "#/definitions/Error"
                  }
                },
                "500": {
                  "description": "Internal server error",
                  "schema": {
                    "$ref": "#/definitions/Error"
                  }
                }
              }
            }
          }
        },
        "parameters": {
          "acceptanceLog": {
            "name": "acceptanceLog",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/acceptanceLog"
            }
          },
          "emailRequest": {
            "name": "emailRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/emailRequest"
            }
          }
        },
        "definitions": {
          "UserProfile": {
            "type": "object",
            "properties": {
              "provider": {
                "type": "string",
                "description": "the channel of user registration",
                "example": "FREEMIUM"
              },
              "contactName": {
                "type": "string",
                "description": "the contact name of the user registered in Big Schedules",
                "example": "abc"
              },
              "emailAddress": {
                "type": "string",
                "description": "the email address of the user registered in Big Schedules",
                "example": "abc@cargosmart.com"
              },
              "company": {
                "type": "string",
                "description": "the company name of the user registered in Big Schedules",
                "example": "Cargosmart"
              },
              "companyType": {
                "type": "string",
                "description": "the company type of the user registered in Big Schedules",
                "example": "CONSIGNEE"
              },
              "country": {
                "type": "string",
                "description": "the country code of the user registered in Big Schedules",
                "example": "PG"
              },
              "userType": {
                "type": "string",
                "description": "the type of the user in Big Schedules",
                "example": "PAID",
                "enum": [
                  "FREE",
                  "PAID"
                ]
              },
              "receiveComm": {
                "type": "boolean",
                "description": "whether user likes to receive the promotion message from BigSchedules or not\n",
                "example": true
              },
              "lastVisitTime": {
                "type": "string",
                "format": "date-time",
                "description": "last visited time of the user in Big Schedules",
                "example": "2017-09-26T06:55:13.816Z"
              },
              "updated": {
                "type": "string",
                "format": "date-time",
                "description": "the profile last updated time of the user in Big Schedules",
                "example": "2017-07-27T06:52:57.222Z"
              },
              "created": {
                "type": "string",
                "format": "date-time",
                "description": "the profile creation time of the user in Big Schedules",
                "example": "2015-06-19T07:32:37.100Z"
              },
              "status": {
                "type": "string",
                "description": "the status of the user in Big Schedules",
                "example": "ACTIVE",
                "enum": [
                  "NEW",
                  "ACTIVE",
                  "INACTIVE"
                ]
              },
              "preferredLanguage": {
                "type": "string",
                "description": "the preferred language in Big Schedules",
                "example": "en-US",
                "enum": [
                  "en-US",
                  "zh-CN",
                  "zh-TW"
                ]
              },
              "address": {
                "type": "string",
                "description": "the address of the user registered in Big Schedules",
                "example": "Hong Kong"
              },
              "phoneNumber": {
                "type": "string",
                "description": "the phone number of the user registered in Big Schedules",
                "example": "987469"
              },
              "paidProducts": {
                "type": "array",
                "items": {
                  "type": "string",
                  "description": "the codes of the products the user paid in Big Schedules",
                  "example": "PREMIUM_USERS_PRODUCT",
                  "enum": [
                    "PREMIUM_USERS_PRODUCT",
                    "RELIABILITY_ANALYTICS_PRODUCT"
                  ]
                }
              }
            }
          },
          "UserFavorites": {
            "properties": {
              "isDefault": {
                "type": "boolean",
                "description": "whether it is default favorite",
                "example": false
              },
              "carriers": {
                "type": "array",
                "minItems": 1,
                "maxItems": 100,
                "uniqueItems": true,
                "description": "carriers list of this favorite",
                "items": {
                  "type": "object",
                  "description": "carrier detailed information",
                  "properties": {
                    "scac": {
                      "type": "string",
                      "description": "carrier scac code",
                      "example": "ANNU"
                    },
                    "name": {
                      "type": "string",
                      "description": "carrier name",
                      "example": "ANL Container Line"
                    },
                    "shortName": {
                      "type": "string",
                      "description": "carrier short name",
                      "example": "ANL"
                    }
                  }
                }
              },
              "portPairs": {
                "type": "array",
                "minItems": 1,
                "maxItems": 5,
                "uniqueItems": false,
                "description": "the point pair list in this favorite",
                "items": {
                  "type": "object",
                  "description": "the point pair object",
                  "properties": {
                    "origin": {
                      "type": "object",
                      "description": "the origin location object of the point pair",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "the unique location identification in Cargosmart",
                          "example": "P508"
                        },
                        "code": {
                          "type": "string",
                          "description": "location unlocode",
                          "example": "CNYTN"
                        },
                        "name": {
                          "type": "string",
                          "description": "location name",
                          "example": "Yantian"
                        },
                        "fullName": {
                          "type": "string",
                          "description": "location full name",
                          "example": "Yantian, Guangdong, China"
                        },
                        "source": {
                          "type": "string",
                          "description": "the source of the location",
                          "example": "R"
                        }
                      }
                    },
                    "destination": {
                      "type": "object",
                      "description": "the destination location object of the point pair",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "the unique location identification in Cargosmart",
                          "example": "P299"
                        },
                        "code": {
                          "type": "string",
                          "description": "location unlocode",
                          "example": "NLRTM"
                        },
                        "name": {
                          "type": "string",
                          "description": "location name",
                          "example": "Rotterdam"
                        },
                        "fullName": {
                          "type": "string",
                          "description": "location full name",
                          "example": "Rotterdam, Zuid-Holland, Netherlands"
                        },
                        "source": {
                          "type": "string",
                          "description": "the source of the location",
                          "example": "R"
                        }
                      }
                    }
                  }
                }
              },
              "id": {
                "type": "string",
                "description": "the port pair id in the favorites",
                "example": "04cd0160-a30b-11e5-8e3b-8d13c612e9c7"
              },
              "created": {
                "type": "integer",
                "format": "int64",
                "description": "the creation time of this favorite",
                "example": 1450170342518
              },
              "updated": {
                "type": "integer",
                "format": "int64",
                "description": "the updated time of this favorite",
                "example": 1503890810160
              },
              "templateName": {
                "type": "string",
                "description": "the name of this favorite",
                "example": "Favorite 3"
              },
              "duration": {
                "type": "integer",
                "format": "int32",
                "minimum": 2,
                "maximum": 8,
                "description": "the duration to query for this favorite",
                "example": 2
              }
            }
          }
        }
      },
      "status": "active"
    },
    {
      "id": 2,
      "name": "Sample",
      "leadingInfo": [
        "[POST]/v2/pet",
        "[PUT]/v2/pet",
        "[GET]/v2/pet/findByStatus",
        "[GET]/v2/pet/findByTags",
        "[GET]/v2/pet/{petId}",
        "[POST]/v2/pet/{petId}",
        "[DELETE]/v2/pet/{petId}",
        "[POST]/v2/pet/{petId}/uploadImage",
        "[GET]/v2/store/inventory",
        "[POST]/v2/store/order",
        "[GET]/v2/store/order/{orderId}",
        "[DELETE]/v2/store/order/{orderId}",
        "[POST]/v2/user",
        "[POST]/v2/user/createWithArray",
        "[POST]/v2/user/createWithList",
        "[GET]/v2/user/login",
        "[GET]/v2/user/logout",
        "[GET]/v2/user/{username}",
        "[PUT]/v2/user/{username}",
        "[DELETE]/v2/user/{username}"
      ],
      "spec": {
        "swagger": "2.0",
        "info": {
          "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
          "version": "1.0.0",
          "title": "Swagger Petstore",
          "termsOfService": "http://swagger.io/terms/",
          "contact": {
            "email": "apiteam@swagger.io"
          },
          "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
          }
        },
        "host": "petstore.swagger.io",
        "basePath": "/v2",
        "tags": [
          {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "store",
            "description": "Access to Petstore orders"
          },
          {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          }
        ],
        "schemes": [
          "https",
          "http"
        ],
        "paths": {
          "/pet": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Add a new pet to the store",
              "description": "",
              "operationId": "addPet",
              "consumes": [
                "application/json",
                "application/xml"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "pet"
              ],
              "summary": "Update an existing pet",
              "description": "",
              "operationId": "updatePet",
              "consumes": [
                "application/json",
                "application/xml"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                },
                "405": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByStatus": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by status",
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status values that need to be considered for filter",
                  "required": true,
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "default": "available"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  }
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByTags": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by tags",
              "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
              "operationId": "findPetsByTags",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "tags",
                  "in": "query",
                  "description": "Tags to filter by",
                  "required": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  }
                },
                "400": {
                  "description": "Invalid tag value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ],
              "deprecated": true
            }
          },
          "/pet/{petId}": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Find pet by ID",
              "description": "Returns a single pet",
              "operationId": "getPetById",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to return",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Updates a pet in the store with form data",
              "description": "",
              "operationId": "updatePetWithForm",
              "consumes": [
                "application/x-www-form-urlencoded"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet that needs to be updated",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "name": "name",
                  "in": "formData",
                  "description": "Updated name of the pet",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "status",
                  "in": "formData",
                  "description": "Updated status of the pet",
                  "required": false,
                  "type": "string"
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "pet"
              ],
              "summary": "Deletes a pet",
              "description": "",
              "operationId": "deletePet",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "api_key",
                  "in": "header",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "Pet id to delete",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}/uploadImage": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "uploads an image",
              "description": "",
              "operationId": "uploadFile",
              "consumes": [
                "multipart/form-data"
              ],
              "produces": [
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to update",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "name": "additionalMetadata",
                  "in": "formData",
                  "description": "Additional data to pass to server",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "file",
                  "in": "formData",
                  "description": "file to upload",
                  "required": false,
                  "type": "file"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/ApiResponse"
                  }
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/store/inventory": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Returns pet inventories by status",
              "description": "Returns a map of status codes to quantities",
              "operationId": "getInventory",
              "produces": [
                "application/json"
              ],
              "parameters": [],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            }
          },
          "/store/order": {
            "post": {
              "tags": [
                "store"
              ],
              "summary": "Place an order for a pet",
              "description": "",
              "operationId": "placeOrder",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "order placed for purchasing the pet",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                },
                "400": {
                  "description": "Invalid Order"
                }
              }
            }
          },
          "/store/order/{orderId}": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Find purchase order by ID",
              "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
              "operationId": "getOrderById",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of pet that needs to be fetched",
                  "required": true,
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1,
                  "format": "int64"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            },
            "delete": {
              "tags": [
                "store"
              ],
              "summary": "Delete purchase order by ID",
              "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
              "operationId": "deleteOrder",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of the order that needs to be deleted",
                  "required": true,
                  "type": "integer",
                  "minimum": 1,
                  "format": "int64"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            }
          },
          "/user": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Create user",
              "description": "This can only be done by the logged in user.",
              "operationId": "createUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Created user object",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/createWithArray": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "",
              "operationId": "createUsersWithArrayInput",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "List of user object",
                  "required": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/createWithList": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "",
              "operationId": "createUsersWithListInput",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "List of user object",
                  "required": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/login": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs user into the system",
              "description": "",
              "operationId": "loginUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "query",
                  "description": "The user name for login",
                  "required": true,
                  "type": "string"
                },
                {
                  "name": "password",
                  "in": "query",
                  "description": "The password for login in clear text",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "string"
                  },
                  "headers": {
                    "X-Rate-Limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "calls per hour allowed by the user"
                    },
                    "X-Expires-After": {
                      "type": "string",
                      "format": "date-time",
                      "description": "date in UTC when token expires"
                    }
                  }
                },
                "400": {
                  "description": "Invalid username/password supplied"
                }
              }
            }
          },
          "/user/logout": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs out current logged in user session",
              "description": "",
              "operationId": "logoutUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/{username}": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Get user by user name",
              "description": "",
              "operationId": "getUserByName",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                },
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Updated user",
              "description": "This can only be done by the logged in user.",
              "operationId": "updateUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "name that need to be updated",
                  "required": true,
                  "type": "string"
                },
                {
                  "in": "body",
                  "name": "body",
                  "description": "Updated user object",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid user supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "delete": {
              "tags": [
                "user"
              ],
              "summary": "Delete user",
              "description": "This can only be done by the logged in user.",
              "operationId": "deleteUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be deleted",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            }
          }
        },
        "securityDefinitions": {
          "petstore_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "flow": "implicit",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          },
          "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
          }
        },
        "definitions": {
          "Order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "petId": {
                "type": "integer",
                "format": "int64"
              },
              "quantity": {
                "type": "integer",
                "format": "int32"
              },
              "shipDate": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Order Status",
                "enum": [
                  "placed",
                  "approved",
                  "delivered"
                ]
              },
              "complete": {
                "type": "boolean",
                "default": false
              }
            },
            "xml": {
              "name": "Order"
            }
          },
          "Category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Category"
            }
          },
          "User": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "username": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "userStatus": {
                "type": "integer",
                "format": "int32",
                "description": "User Status"
              }
            },
            "xml": {
              "name": "User"
            }
          },
          "Tag": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Tag"
            }
          },
          "Pet": {
            "type": "object",
            "required": [
              "name",
              "photoUrls"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "category": {
                "$ref": "#/definitions/Category"
              },
              "name": {
                "type": "string",
                "example": "doggie"
              },
              "photoUrls": {
                "type": "array",
                "xml": {
                  "name": "photoUrl",
                  "wrapped": true
                },
                "items": {
                  "type": "string"
                }
              },
              "tags": {
                "type": "array",
                "xml": {
                  "name": "tag",
                  "wrapped": true
                },
                "items": {
                  "$ref": "#/definitions/Tag"
                }
              },
              "status": {
                "type": "string",
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            },
            "xml": {
              "name": "Pet"
            }
          },
          "ApiResponse": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        },
        "externalDocs": {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io"
        }
      }
    },
    {
      "spec": {
        "swagger": "2.0",
        "info": {
          "description": "This is a sample server Petstore server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters.",
          "version": "1.0.0",
          "title": "Swagger Petstore",
          "termsOfService": "http://swagger.io/terms/",
          "contact": {
            "email": "apiteam@swagger.io"
          },
          "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
          }
        },
        "host": "petstore.swagger.io",
        "basePath": "/v2",
        "tags": [
          {
            "name": "pet",
            "description": "Everything about your Pets",
            "externalDocs": {
              "description": "Find out more",
              "url": "http://swagger.io"
            }
          },
          {
            "name": "store",
            "description": "Access to Petstore orders"
          },
          {
            "name": "user",
            "description": "Operations about user",
            "externalDocs": {
              "description": "Find out more about our store",
              "url": "http://swagger.io"
            }
          }
        ],
        "schemes": [
          "https",
          "http"
        ],
        "paths": {
          "/pet": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Add a new pet to the store",
              "description": "",
              "operationId": "addPet",
              "consumes": [
                "application/json",
                "application/xml"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "put": {
              "tags": [
                "pet"
              ],
              "summary": "Update an existing pet",
              "description": "",
              "operationId": "updatePet",
              "consumes": [
                "application/json",
                "application/xml"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Pet object that needs to be added to the store",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                },
                "405": {
                  "description": "Validation exception"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByStatus": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by status",
              "description": "Multiple status values can be provided with comma separated strings",
              "operationId": "findPetsByStatus",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "status",
                  "in": "query",
                  "description": "Status values that need to be considered for filter",
                  "required": true,
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "default": "available"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  }
                },
                "400": {
                  "description": "Invalid status value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/findByTags": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Finds Pets by tags",
              "description": "Muliple tags can be provided with comma separated strings. Use         tag1, tag2, tag3 for testing.",
              "operationId": "findPetsByTags",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "tags",
                  "in": "query",
                  "description": "Tags to filter by",
                  "required": true,
                  "type": "array",
                  "items": {
                    "type": "string"
                  },
                  "collectionFormat": "multi"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/Pet"
                    }
                  }
                },
                "400": {
                  "description": "Invalid tag value"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ],
              "deprecated": true
            }
          },
          "/pet/{petId}": {
            "get": {
              "tags": [
                "pet"
              ],
              "summary": "Find pet by ID",
              "description": "Returns a single pet",
              "operationId": "getPetById",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to return",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Pet"
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            },
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "Updates a pet in the store with form data",
              "description": "",
              "operationId": "updatePetWithForm",
              "consumes": [
                "application/x-www-form-urlencoded"
              ],
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet that needs to be updated",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "name": "name",
                  "in": "formData",
                  "description": "Updated name of the pet",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "status",
                  "in": "formData",
                  "description": "Updated status of the pet",
                  "required": false,
                  "type": "string"
                }
              ],
              "responses": {
                "405": {
                  "description": "Invalid input"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            },
            "delete": {
              "tags": [
                "pet"
              ],
              "summary": "Deletes a pet",
              "description": "",
              "operationId": "deletePet",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "api_key",
                  "in": "header",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "petId",
                  "in": "path",
                  "description": "Pet id to delete",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Pet not found"
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/pet/{petId}/uploadImage": {
            "post": {
              "tags": [
                "pet"
              ],
              "summary": "uploads an image",
              "description": "",
              "operationId": "uploadFile",
              "consumes": [
                "multipart/form-data"
              ],
              "produces": [
                "application/json"
              ],
              "parameters": [
                {
                  "name": "petId",
                  "in": "path",
                  "description": "ID of pet to update",
                  "required": true,
                  "type": "integer",
                  "format": "int64"
                },
                {
                  "name": "additionalMetadata",
                  "in": "formData",
                  "description": "Additional data to pass to server",
                  "required": false,
                  "type": "string"
                },
                {
                  "name": "file",
                  "in": "formData",
                  "description": "file to upload",
                  "required": false,
                  "type": "file"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/ApiResponse"
                  }
                }
              },
              "security": [
                {
                  "petstore_auth": [
                    "write:pets",
                    "read:pets"
                  ]
                }
              ]
            }
          },
          "/store/inventory": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Returns pet inventories by status",
              "description": "Returns a map of status codes to quantities",
              "operationId": "getInventory",
              "produces": [
                "application/json"
              ],
              "parameters": [],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "object",
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int32"
                    }
                  }
                }
              },
              "security": [
                {
                  "api_key": []
                }
              ]
            }
          },
          "/store/order": {
            "post": {
              "tags": [
                "store"
              ],
              "summary": "Place an order for a pet",
              "description": "",
              "operationId": "placeOrder",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "order placed for purchasing the pet",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                },
                "400": {
                  "description": "Invalid Order"
                }
              }
            }
          },
          "/store/order/{orderId}": {
            "get": {
              "tags": [
                "store"
              ],
              "summary": "Find purchase order by ID",
              "description": "For valid response try integer IDs with value >= 1 and <= 10.         Other values will generated exceptions",
              "operationId": "getOrderById",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of pet that needs to be fetched",
                  "required": true,
                  "type": "integer",
                  "maximum": 10,
                  "minimum": 1,
                  "format": "int64"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/Order"
                  }
                },
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            },
            "delete": {
              "tags": [
                "store"
              ],
              "summary": "Delete purchase order by ID",
              "description": "For valid response try integer IDs with positive integer value.         Negative or non-integer values will generate API errors",
              "operationId": "deleteOrder",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "orderId",
                  "in": "path",
                  "description": "ID of the order that needs to be deleted",
                  "required": true,
                  "type": "integer",
                  "minimum": 1,
                  "format": "int64"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid ID supplied"
                },
                "404": {
                  "description": "Order not found"
                }
              }
            }
          },
          "/user": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Create user",
              "description": "This can only be done by the logged in user.",
              "operationId": "createUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "Created user object",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/createWithArray": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "",
              "operationId": "createUsersWithArrayInput",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "List of user object",
                  "required": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/createWithList": {
            "post": {
              "tags": [
                "user"
              ],
              "summary": "Creates list of users with given input array",
              "description": "",
              "operationId": "createUsersWithListInput",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "in": "body",
                  "name": "body",
                  "description": "List of user object",
                  "required": true,
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/definitions/User"
                    }
                  }
                }
              ],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/login": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs user into the system",
              "description": "",
              "operationId": "loginUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "query",
                  "description": "The user name for login",
                  "required": true,
                  "type": "string"
                },
                {
                  "name": "password",
                  "in": "query",
                  "description": "The password for login in clear text",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "type": "string"
                  },
                  "headers": {
                    "X-Rate-Limit": {
                      "type": "integer",
                      "format": "int32",
                      "description": "calls per hour allowed by the user"
                    },
                    "X-Expires-After": {
                      "type": "string",
                      "format": "date-time",
                      "description": "date in UTC when token expires"
                    }
                  }
                },
                "400": {
                  "description": "Invalid username/password supplied"
                }
              }
            }
          },
          "/user/logout": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Logs out current logged in user session",
              "description": "",
              "operationId": "logoutUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [],
              "responses": {
                "default": {
                  "description": "successful operation"
                }
              }
            }
          },
          "/user/{username}": {
            "get": {
              "tags": [
                "user"
              ],
              "summary": "Get user by user name",
              "description": "",
              "operationId": "getUserByName",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be fetched. Use user1 for testing. ",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "200": {
                  "description": "successful operation",
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                },
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "put": {
              "tags": [
                "user"
              ],
              "summary": "Updated user",
              "description": "This can only be done by the logged in user.",
              "operationId": "updateUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "name that need to be updated",
                  "required": true,
                  "type": "string"
                },
                {
                  "in": "body",
                  "name": "body",
                  "description": "Updated user object",
                  "required": true,
                  "schema": {
                    "$ref": "#/definitions/User"
                  }
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid user supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            },
            "delete": {
              "tags": [
                "user"
              ],
              "summary": "Delete user",
              "description": "This can only be done by the logged in user.",
              "operationId": "deleteUser",
              "produces": [
                "application/xml",
                "application/json"
              ],
              "parameters": [
                {
                  "name": "username",
                  "in": "path",
                  "description": "The name that needs to be deleted",
                  "required": true,
                  "type": "string"
                }
              ],
              "responses": {
                "400": {
                  "description": "Invalid username supplied"
                },
                "404": {
                  "description": "User not found"
                }
              }
            }
          }
        },
        "securityDefinitions": {
          "petstore_auth": {
            "type": "oauth2",
            "authorizationUrl": "http://petstore.swagger.io/oauth/dialog",
            "flow": "implicit",
            "scopes": {
              "write:pets": "modify pets in your account",
              "read:pets": "read your pets"
            }
          },
          "api_key": {
            "type": "apiKey",
            "name": "api_key",
            "in": "header"
          }
        },
        "definitions": {
          "Order": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "petId": {
                "type": "integer",
                "format": "int64"
              },
              "quantity": {
                "type": "integer",
                "format": "int32"
              },
              "shipDate": {
                "type": "string",
                "format": "date-time"
              },
              "status": {
                "type": "string",
                "description": "Order Status",
                "enum": [
                  "placed",
                  "approved",
                  "delivered"
                ]
              },
              "complete": {
                "type": "boolean",
                "default": false
              }
            },
            "xml": {
              "name": "Order"
            }
          },
          "Category": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Category"
            }
          },
          "User": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "username": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "email": {
                "type": "string"
              },
              "password": {
                "type": "string"
              },
              "phone": {
                "type": "string"
              },
              "userStatus": {
                "type": "integer",
                "format": "int32",
                "description": "User Status"
              }
            },
            "xml": {
              "name": "User"
            }
          },
          "Tag": {
            "type": "object",
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "name": {
                "type": "string"
              }
            },
            "xml": {
              "name": "Tag"
            }
          },
          "Pet": {
            "type": "object",
            "required": [
              "name",
              "photoUrls"
            ],
            "properties": {
              "id": {
                "type": "integer",
                "format": "int64"
              },
              "category": {
                "$ref": "#/definitions/Category"
              },
              "name": {
                "type": "string",
                "example": "doggie"
              },
              "photoUrls": {
                "type": "array",
                "xml": {
                  "name": "photoUrl",
                  "wrapped": true
                },
                "items": {
                  "type": "string"
                }
              },
              "tags": {
                "type": "array",
                "xml": {
                  "name": "tag",
                  "wrapped": true
                },
                "items": {
                  "$ref": "#/definitions/Tag"
                }
              },
              "status": {
                "type": "string",
                "description": "pet status in the store",
                "enum": [
                  "available",
                  "pending",
                  "sold"
                ]
              }
            },
            "xml": {
              "name": "Pet"
            }
          },
          "ApiResponse": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer",
                "format": "int32"
              },
              "type": {
                "type": "string"
              },
              "message": {
                "type": "string"
              }
            }
          }
        },
        "externalDocs": {
          "description": "Find out more about Swagger",
          "url": "http://swagger.io"
        }
      },
      "leadingInfo": [
        "[POST]/v2/pet",
        "[PUT]/v2/pet",
        "[GET]/v2/pet/findByStatus",
        "[GET]/v2/pet/findByTags",
        "[GET]/v2/pet/{petId}",
        "[POST]/v2/pet/{petId}",
        "[DELETE]/v2/pet/{petId}",
        "[POST]/v2/pet/{petId}/uploadImage",
        "[GET]/v2/store/inventory",
        "[POST]/v2/store/order",
        "[GET]/v2/store/order/{orderId}",
        "[DELETE]/v2/store/order/{orderId}",
        "[POST]/v2/user",
        "[POST]/v2/user/createWithArray",
        "[POST]/v2/user/createWithList",
        "[GET]/v2/user/login",
        "[GET]/v2/user/logout",
        "[GET]/v2/user/{username}",
        "[PUT]/v2/user/{username}",
        "[DELETE]/v2/user/{username}"
      ],
      "name": "TEST2",
      "id": 3
    }
  ]
}